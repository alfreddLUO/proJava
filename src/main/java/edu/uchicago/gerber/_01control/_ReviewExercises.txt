#########################################################################
# Use this file to answer Review Exercises from the Big Java textbook
#########################################################################

R1.5 The following are all benefits to using Java over machine code:
1/ Java bytecode is platform independent and may be run on any system that has a JVM. This quality is known as portability.
2/ Java JIT compilers can run efficient Java programs as fast or faster than machine code programs
3/ Java is memory-managed. This reduces about 95% of runtime errors (mostly memory-related) as compared to unmanaged code.
4/ Java was designed for networking and the Internet in mind; and it is generally safer than machine code
5/ With the introduction of Java8, Java is now a declarative and functional programming language.
6/ The GraalVM is capable of compiling Java programs to o/s targeted binary code, forgoing the JVM altogether.

R2.4 Translating math expressions to Java.
a. double s;
   double v;
   double t;
   double g;
   s = s + (v * t) + (0.5 * g * t * t);

b. double FV;
   double PV;
   double INT;
   int YRS;
   FV = PV * Math.pow((1 + INT), YRS);

c. double G;
   double p;
   double m1;
   double m2;
   double a;
   G= 4*(Math.PI*Math.PI)*Math.pow(a,3)/(Math.pow(p,2)*(m1+m2));

d. double c;
   double a;
   double b;
   double gamma;
   c=Math.sqrt(a*a+b*b-2*a*b*Math.cos(gamma));


R2.7 Understanding integer operations, order of precedence, and integer division.
n=17, m=18;
a. n / 10 + n % 10=1+7=8
b. n % 2 + m % 2=1+0=1
c. (m + n) / 2=35/2=17
d. (m + n) / 2.0= 17.5
e. (int) (0.5 * (m + n))
f. (int) Math.round(0.5 * (m + n))=17


R2.14 How the compiler interprets primitive values
Explain the differences between 2, 2.0, '2', "2", and "2.0".
2: integer
2.0:double
'2': character
"2": String
"2.0": String


R2.17 Pseudocode understading
//get input-message from user
//Store input-message in String
//Split the String using space as regex into firstName, middleName, lastName
//Get the first letter of each name: firstNameInitial, middleNameInitial, lastNameInitial
//Combine the initials to form the monogram, monogram= firstNameInitial+middleNameInitial+lastNameInitial
//Print the monogram in uppercase


R2.22 More pseudocode - you do not need to draw a diagram for this question
//Step 1: Store the string is "SunMonTueWedThuFriSat" and day number is 4
//Step 2: compute the start position for day number 4, is 4*3=12
//Step 3: Find the start letter with index 12, which is T
//Step 4: Extract the substring of names at the starting position 12 with length 3, which is "Thu"
//Step 5: Output the result


R3.19 Pseudocode for grade problem
//get the quiz scores from users
//for each quiz score in quiz scores
	//if score is between 90 and 100
		//grade = "A"
    //if score is between 80 and 89
    	//grade = "B"
    //if score is between 70 and 79
    	//grade = "C"
    //if score is between 60 and 69
        //grade = "D"
    //else
    	//grade = "F"
//Print the letter grades for all scores


R3.30 Boolean expressions
Suppose the value of b is false and the value of x is 0
a. b && x == 0: true
b. b || x == 0: true
c. !b && x == 0: true
d. !b || x == 0: false
e. b && x != 0: false
f. b || x != 0: false
g. !b && x != 0: false
h. !b || x != 0: true


R4.12 Implementing loops
1. for-loop: use when you know the number of iterations beforehand
for(int i=0;i<end;i++){

}
2. while-loo; use when you want to stop the loop when the conditions in the () are true
while(condition){

}
3. do-while-loop: use when you want to execute the code block at least once in spite of the condition.
do{

} while(condition);
4. for-each loop: use for iterating the elements of collections, when you don't need the index of the elements, which means you simply need read the value of the element
for(type element: collections){

}


R4.14 Calendar problem
//Step 1: get the start day as startDay (0 for Su, 1 for M, ..Sa for 6)  and total days as totalDays for a month
//Step 2: print the header, "Su M T W Th F Sa"
//Step 3: print a new line, and then print (startDay)*3 spaces as initial spaces.
//Step 4: Initial the current day as curDay=1
//Step 5: for curDay= 1 to totalDays:
    //if curDay+startDay-1)%7==0:
        //print new line
    //if curDay<10:
        //print curDay+" "+ " "
    //else:
        //print curDay+" "+ " " + " "
